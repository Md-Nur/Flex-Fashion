// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id             String    @id @default(uuid())
  name           String
  email          String    @unique
  password       String
  address        String?
  isAdmin        Boolean   @default(false)
  orders         Order[]
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
}

model Product {
  id             String     @id @default(uuid())
  name           String
  description    String
  price          Float
  category       Category   @relation(fields: [categoryId], references: [id])
  categoryId     String
  sizes          ProductSize[]
  colors         ProductColor[]
  images         ProductImage[]
  stock          Int
  orderItems     OrderItem[]
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  name      String     @unique
  products  Product[]
}

model ProductSize {
  id        String   @id @default(uuid())
  size      String   // e.g., S, M, L, XL
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductColor {
  id        String   @id @default(uuid())
  color     String   // e.g., black, white, red
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model ProductImage {
  id        String   @id @default(uuid())
  url       String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
}

model Order {
  id          String       @id @default(uuid())
  user        User         @relation(fields: [userId], references: [id])
  userId      String
  items       OrderItem[]
  total       Float
  status      OrderStatus  @default(PENDING)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model OrderItem {
  id          String   @id @default(uuid())
  order       Order    @relation(fields: [orderId], references: [id])
  orderId     String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  size        String
  color       String
  quantity    Int
  price       Float
}

enum OrderStatus {
  PENDING
  SHIPPED
  DELIVERED
  CANCELLED
}
